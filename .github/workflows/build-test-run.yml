
name: Laravel

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  laravel-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Copy .env
        run: cp .env.example .env

      - name: Install Dependencies
        run: composer update -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Generate key
        run: php artisan key:generate

      - name: Set file permissions
        run: chmod -R 777 storage bootstrap/cache

      - name: Read database connection details from .env
        id: env
        run: |
          echo "DB_CONNECTION=$(grep -oP '^DB_CONNECTION=\K.*' .env)" >> $GITHUB_ENV
          echo "DB_HOST=$(grep -oP '^DB_HOST=\K.*' .env)" >> $GITHUB_ENV
          echo "DB_PORT=$(grep -oP '^DB_PORT=\K.*' .env)" >> $GITHUB_ENV
          echo "DB_DATABASE=$(grep -oP '^DB_DATABASE=\K.*' .env)" >> $GITHUB_ENV
          echo "DB_USERNAME=$(grep -oP '^DB_USERNAME=\K.*' .env)" >> $GITHUB_ENV
          echo "DB_PASSWORD=$(grep -oP '^DB_PASSWORD=\K.*' .env)" >> $GITHUB_ENV

      - name: Execute tests (Unit and Feature tests) via PHPUnit
        env:
          DB_CONNECTION: ${{ env.DB_CONNECTION }}
          DB_HOST: ${{ env.DB_HOST }}
          DB_PORT: ${{ env.DB_PORT }}
          DB_DATABASE: ${{ env.DB_DATABASE }}
          DB_USERNAME: ${{ env.DB_USERNAME }}
          DB_PASSWORD: ${{ env.DB_PASSWORD }}
        run: vendor/bin/phpunit


      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push Docker image
        env:
          AWS_REGION: us-east-1
          ECR_REGISTRY: 058264338839.dkr.ecr.us-east-1.amazonaws.com
          ECR_REPOSITORY: ataytus-test-php
          IMAGE_TAG: v1
        run: |
          echo ${{ secrets.AWS_ACCESS_KEY_ID }} | docker login --username AWS --password-stdin $ECR_REGISTRY
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG